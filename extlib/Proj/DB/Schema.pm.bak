package Proj::DB::Schema;
use DBIx::Skinny::Schema;
use DateTime::Format::Strptime;
use DateTime::Format::SQLite;

install_table user => schema {
    pk 'id';
    columns qw/id name birth_on created_at/;
};

install_common_trigger pre_insert => sub {
    my ( $self, $args, $table ) = @_;

    my $columns = $self->schema->schema_info->{$table}->{columns};
    $args->{created_at} .= DateTime->now if grep {/^created_at$/} @$columns;
};

install_inflate_rule '^.+_on$' => callback {
    inflate {
        my $value = shift;
        my $dt    = DateTime::Format::Strptime->new(
            pattern   => '%Y-%m-%d %H:%M:%S',
            time_zone => 'Asia/Tokyo',
        )->parse_date($value);
        return DateTime->from_object( object => $dt );
    };
    deflate {
        my $value = shift;
        return DateTime::Format::SQLite->format_date($value);
    };
};

install_inflate_rule '^.+_at$' => callback {
    inflate {
        my $value = shift;
        my $dt    = DateTime::Format::Strptime->new(
            pattern   => '%Y-%m-%dT%H:%M:%S', # SQLite
            time_zone => 'Asia/Tokyo',
        )->parse_datetime($value);
        return DateTime->from_object( object => $dt );
    };
    deflate {
        my $value = shift;
        if ( ref $value eq 'DateTime' ) {
            return DateTime::Format::SQLite->format_datetime($value);
        }
        else {
            return $value;
        }
    };
};

1;

